(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{107:function(e,n,t){e.exports=t(220)},220:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(25),c=t.n(i),o=t(12),u=t(10),l=t(102),s=t.n(l),m=t(46),f=t.n(m),d=t(105),v=t(49),g=t(48),p=t(47),b=function(e){return new Promise(function(n,t){var r=new FileReader;r.onerror=t,r.onload=function(){r.result?n(r.result):t("File does not exist.")},r.readAsDataURL(e)})},h=function(e){return new Promise(function(n){var t=new Image;t.onload=function(){n(t.naturalWidth/t.naturalHeight)},t.src=e})},w=function(e,n){var t=document.createElement("a");t.download=n,t.href=e.replace(/^data:image\/[^;]+/,"data:application/octet-stream"),document.body.appendChild(t),t.click(),document.body.removeChild(t)},k=t(4),j='\n  #ifdef GL_ES\n  precision mediump float;\n  precision mediump int;\n  #endif\n\n  varying vec2 vTextureCoord;\n  uniform sampler2D uSampler;\n  uniform vec2 resolution;\n\n  #define RADIUS 3\n\n  void main (void) {\n\n    // Bildkoordinaten des aktuellen Pixels -> (u,v) von 0 .. 1\n    vec2 src_size = vec2(resolution.x, resolution.y);\n    vec2 uv = vTextureCoord;\n\n    // Anzahl der Pixel einer Region\n    float n = float((RADIUS + 1) * (RADIUS + 1));\n\n    // Summen und Summenquadrate der Regionen (in Burger: (17.4 S_1,k, 17.5 S_2,k)\n    // Zu beachten: Jeweils Vektoren mit 3 Elementen f\xfcr die einzelnen Farbkan\xe4le RGB\n    vec3 m[4];\n    vec3 s[4];\n    for (int k = 0; k < 4; ++k) {\n      m[k] = vec3(0.0);\n      s[k] = vec3(0.0);\n    }\n\n    for (int t = -RADIUS; t <= 0; ++t) {\n      for (int i = -RADIUS; i <= 0; ++i) {\n        vec3 c = texture2D(uSampler, uv + vec2(i,t) / src_size).rgb;\n        m[0] += c;\n        s[0] += c * c;\n      }\n    }\n\n    for (int j = -RADIUS; j <= 0; ++j) {\n      for (int i = 0; i <= RADIUS; ++i) {\n        vec3 c = texture2D(uSampler, uv + vec2(i,j) / src_size).rgb;\n        m[1] += c;\n        s[1] += c * c;\n      }\n    }\n\n    for (int j = 0; j <= RADIUS; ++j) {\n      for (int i = 0; i <= RADIUS; ++i) {\n        vec3 c = texture2D(uSampler, uv + vec2(i,j) / src_size).rgb;\n        m[2] += c;\n        s[2] += c * c;\n      }\n    }\n\n    for (int j = 0; j <= RADIUS; ++j) {\n      for (int i = -RADIUS; i <= 0; ++i) {\n        vec3 c = texture2D(uSampler, uv + vec2(i,j) / src_size).rgb;\n        m[3] += c;\n        s[3] += c * c;\n      }\n    }\n\n    // Region mit der kleinsten Varianz finden und deren Mittelwert als neuen Pixelwert nutzen\n\n    float min_sigma2 = 100.0;\n    for (int k = 0; k < 4; ++k) {\n\n      // Tats\xe4chliche Mittelwerte und Varianzen der Regionen berechnen\n      // Analog zu (17.3) in Burger\n      m[k] /= n;\n      s[k] = abs(s[k] / n - m[k] * m[k]);\n\n      // "Totale Varianz"\n      float sigma2 = s[k].r + s[k].g + s[k].b;\n\n      if (sigma2 < min_sigma2) {\n        min_sigma2 = sigma2;\n        // Neuen Pixelwert setzen\n        gl_FragColor = vec4(m[k], 1.0);\n      }\n    }\n  }\n';function S(){var e=Object(o.a)(["\n  margin-top: 10px;\n"]);return S=function(){return e},e}function x(){var e=Object(o.a)(["\n  margin-bottom: 10px;\n"]);return x=function(){return e},e}function O(){var e=Object(o.a)(["\n  text-align: center;\n"]);return O=function(){return e},e}var D={width:500,height:500},R=u.default.div(O()),E=u.default.div(x()),A=u.default.div(S());function z(){var e=Object(r.useRef)(null),n=Object(r.useState)(D),t=Object(g.a)(n,2),i=t[0],c=t[1],o=Object(r.useState)(null),u=Object(g.a)(o,2),l=u[0],s=u[1],m=function(e){var n=e.width,t=e.height,a=Object(r.useMemo)(function(){return{resolution:{type:"v2",value:[n,t]}}},[n,t]);return{KuwaharaFilter:Object(r.useMemo)(function(){return new k.Filter("",j,a)},[a])}}(Object(v.a)({},i)).KuwaharaFilter,S=Object(r.useCallback)(function(){var e=Object(d.a)(f.a.mark(function e(n){var t,r,a;return f.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=Array.prototype.slice.call(n.target.files),e.prev=1,c(D),e.next=5,b(t[0]);case 5:return r=e.sent,s(r),e.next=9,h(r);case 9:a=e.sent,c(function(e){return Object(v.a)({},e,{width:e.width*a})}),e.next=16;break;case 13:e.prev=13,e.t0=e.catch(1),alert(e.t0.message);case 16:case"end":return e.stop()}},e,this,[[1,13]])}));return function(n){return e.apply(this,arguments)}}(),[]),x=Object(r.useCallback)(function(){var n=e.current;if(n){var t=n.app,r=t.renderer.plugins.extract.base64(t.stage);w(r,"image.jpg")}else alert("Download failed")},[]);return a.a.createElement(a.a.Fragment,null,a.a.createElement(R,null,a.a.createElement(E,null,a.a.createElement("input",{type:"file",accept:"image/*",onChange:S})),a.a.createElement(p.Stage,Object.assign({ref:e},i),l&&a.a.createElement(p.Sprite,Object.assign({image:l,filters:[m]},i))),l&&a.a.createElement(A,null,a.a.createElement("button",{onClick:x},"Download"))))}function I(){var e=Object(o.a)(["\n  font-size: 36px;\n  font-weight: bold;\n  text-align: center;\n  line-height: 1.5;\n  padding: 24px 0;\n"]);return I=function(){return e},e}function y(){var e=Object(o.a)(["\n  ","\n"]);return y=function(){return e},e}Object(u.createGlobalStyle)(y(),s.a);var U=u.default.h1(I());Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(a.a.createElement(function(){return a.a.createElement(a.a.Fragment,null,a.a.createElement(U,null,"Kuwahara Filter"),a.a.createElement(z,null))},null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[107,2,1]]]);
//# sourceMappingURL=main.94fe5cb2.chunk.js.map